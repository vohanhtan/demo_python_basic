"""
AI Stock Insight - ·ª®ng d·ª•ng ph√¢n t√≠ch k·ªπ thu·∫≠t v√† d·ª± ƒëo√°n c·ªï phi·∫øu
Streamlit UI ch√≠nh cho vi·ªác nh·∫≠p li·ªáu, ph√¢n t√≠ch v√† hi·ªÉn th·ªã k·∫øt qu·∫£
"""

import json
from datetime import datetime, timedelta
import traceback

from pathlib import Path

import pandas as pd
import streamlit as st

# Project modules
from data_service import get_stock_data, get_available_symbols, get_data_info
from indicators import add_indicators, get_latest_indicators
from forecast_service import get_forecast
from ai_module import get_ai_advice, get_ai_confidence_score
from logger import append_daily_log, export_today_report
from visualizer import (
    make_price_chart,
    create_combined_chart,
    create_candlestick_chart,
)
from utils import (
    validate_date_range,
    get_current_datetime_iso,
    normalize_symbol,
    get_config,
    is_data_short,
)

# Session state init cho export button
if "export_result" not in st.session_state:
    st.session_state.export_result = ""


def main():
    """H√†m ch√≠nh c·ªßa ·ª©ng d·ª•ng Streamlit"""

    # C·∫•u h√¨nh trang
    st.set_page_config(
        page_title="AI Stock Insight",
        layout="wide",
        initial_sidebar_state="expanded",
    )

    # Ti√™u ƒë·ªÅ ch√≠nh
    st.title("AI Stock Insight ‚Äî Ph√¢n t√≠ch k·ªπ thu·∫≠t & D·ª± ƒëo√°n")
    st.markdown("---")

    # Sidebar cho input
    with st.sidebar:
        st.header("C√†i ƒë·∫∑t ph√¢n t√≠ch")

        # Input m√£ c·ªï phi·∫øu
        available_symbols = get_available_symbols()
        if available_symbols:
            symbol = st.selectbox(
                "M√£ c·ªï phi·∫øu",
                options=available_symbols,
                index=0,
                help="Ch·ªçn m√£ c·ªï phi·∫øu c√≥ s·∫µn trong h·ªá th·ªëng",
            )
        else:
            symbol = st.text_input(
                "M√£ c·ªï phi·∫øu",
                value="FPT",
                help="Nh·∫≠p m√£ c·ªï phi·∫øu (v√≠ d·ª•: FPT, VNM, AAPL, MSFT)",
            )

        # Input kho·∫£ng ng√†y
        col1, col2 = st.columns(2)
        with col1:
            start_date = st.date_input(
                "Ng√†y b·∫Øt ƒë·∫ßu",
                value=datetime.now() - timedelta(days=60),
                help="Ng√†y b·∫Øt ƒë·∫ßu ph√¢n t√≠ch",
            )

        with col2:
            end_date = st.date_input(
                "Ng√†y k·∫øt th√∫c",
                value=datetime.now(),
                help="Ng√†y k·∫øt th√∫c ph√¢n t√≠ch",
            )

        # Input s·ªë ng√†y d·ª± ƒëo√°n + model
        colm1, colm2 = st.columns(2)
        with colm1:
            forecast_days = st.number_input(
                "S·ªë ng√†y d·ª± ƒëo√°n",
                min_value=1,
                max_value=10,
                value=5,
                help="S·ªë ng√†y d·ª± ƒëo√°n gi√° (1-10 ng√†y)",
            )
        with colm2:
            model_choice = st.selectbox(
                "M√¥ h√¨nh d·ª± b√°o",
                options=["linear", "auto", "chronos"],
                index=0,
                help="linear: nhanh, kh√¥ng c·∫ßn model; auto/chronos: d√πng Chronos n·∫øu c√≥",
            )

        # N√∫t ph√¢n t√≠ch
        analyze_button = st.button("Ph√¢n t√≠ch", type="primary", use_container_width=True)

        # N√∫t xu·∫•t b√°o c√°o (ƒë·∫∑t d∆∞·ªõi n√∫t ph√¢n t√≠ch)
        export_button = st.button("Xu·∫•t b√°o c√°o h√¥m nay", key="export_today_btn", use_container_width=True)

        # Th√¥ng tin d·ªØ li·ªáu nhanh
        if symbol:
            _show_data_info(symbol, str(start_date), str(end_date))
    
    # Main content
    if analyze_button:
        _perform_analysis(symbol, start_date, end_date, forecast_days, model_choice)
    elif export_button:
        _handle_export()
    else:
        _show_welcome_message()


def _show_data_info(symbol: str, start_date: str, end_date: str):
    """Hi·ªÉn th·ªã th√¥ng tin d·ªØ li·ªáu c·ªßa m√£ c·ªï phi·∫øu"""
    try:
        info = get_data_info(symbol, start_date, end_date)
        if info:
            st.markdown("---")
            st.subheader("üìä Th√¥ng tin d·ªØ li·ªáu")
            
            # Th√¥ng tin c∆° b·∫£n
            col1, col2 = st.columns(2)
            with col1:
                st.write(f"**M√£:** {info['symbol']}")
                st.write(f"**T√™n c√¥ng ty:** {info['name']}")
                st.write(f"**Ng√†nh:** {info['sector']}")
                st.write(f"**Lƒ©nh v·ª±c:** {info['industry']}")
            
            with col2:
                st.write(f"**S√†n giao d·ªãch:** {info['exchange']}")
                st.write(f"**Ti·ªÅn t·ªá:** {info['currency']}")
                if info['market_cap'] > 0:
                    st.write(f"**V·ªën h√≥a:** ${info['market_cap']:,.0f}")
            
            # Th√¥ng tin th·ªëng k√™
            st.markdown("**üìà Th·ªëng k√™ gi√°:**")
            col3, col4 = st.columns(2)
            with col3:
                st.write(f"**S·ªë ng√†y:** {info['total_days']}")
                st.write(f"**T·ª´:** {info['start_date']}")
                st.write(f"**ƒê·∫øn:** {info['end_date']}")
            
            with col4:
                st.write(f"**Gi√° cao nh·∫•t:** ${info['highest_price']:,.2f}")
                st.write(f"**Gi√° th·∫•p nh·∫•t:** ${info['lowest_price']:,.2f}")
                st.write(f"**Volume TB:** {info['avg_volume']:,.0f}")
                
    except Exception as e:
        st.error(f"Kh√¥ng th·ªÉ t·∫£i th√¥ng tin cho m√£ {symbol}: {str(e)}")


def _handle_export():
    """X·ª≠ l√Ω xu·∫•t b√°o c√°o"""
    st.subheader("Xu·∫•t b√°o c√°o h√¥m nay")

    export_format = get_config("EXPORT_FORMAT", "both")

    try:
        export_result = export_today_report(export_format)
        st.session_state.export_result = export_result
        st.success(export_result)

        # Th√™m download buttons
        _show_download_buttons()

    except Exception as e:
        error_msg = f"L·ªói xu·∫•t b√°o c√°o: {str(e)}"
        st.session_state.export_result = error_msg
        st.error(error_msg)

    # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ file log
    st.subheader("Th√¥ng tin file")
    report_dir = get_config("REPORT_DIR", "reports")
    export_dir = get_config("EXPORT_DIR", "export")
    st.write(f"**Th∆∞ m·ª•c log:** `{report_dir}/`")
    st.write(f"**Th∆∞ m·ª•c export:** `{export_dir}/`")
    st.write(f"**ƒê·ªãnh d·∫°ng file:** `YYYY-MM-DD.json`")
    st.write(f"**File xu·∫•t:** `YYYY-MM-DD_report.csv/pdf`")


def _show_download_buttons():
    """Hi·ªÉn th·ªã n√∫t download file ƒë√£ export"""
    import os

    today = datetime.now().strftime("%Y-%m-%d")
    export_dir = get_config("EXPORT_DIR", "export")

    st.subheader("T·∫£i xu·ªëng file")

    # CSV download
    csv_path = f"{export_dir}/{today}_report.csv"
    if os.path.exists(csv_path):
        with open(csv_path, "rb") as f:
            csv_data = f.read()
        st.download_button(label="T·∫£i xu·ªëng CSV", data=csv_data, file_name=f"{today}_report.csv", mime="text/csv")

    # PDF download
    pdf_path = f"{export_dir}/{today}_report.pdf"
    if os.path.exists(pdf_path):
        with open(pdf_path, "rb") as f:
            pdf_data = f.read()
        st.download_button(
            label="T·∫£i xu·ªëng PDF",
            data=pdf_data,
            file_name=f"{today}_report.pdf",
            mime="application/pdf",
        )


def _show_welcome_message():
    """Hi·ªÉn th·ªã th√¥ng ƒëi·ªáp ch√†o m·ª´ng"""
    st.markdown(
        """
    ### Ch√†o m·ª´ng ƒë·∫øn v·ªõi AI Stock Insight!

    **·ª®ng d·ª•ng n√†y gi√∫p b·∫°n:**
    - Ph√¢n t√≠ch k·ªπ thu·∫≠t c·ªï phi·∫øu v·ªõi c√°c ch·ªâ b√°o SMA v√† RSI
    - D·ª± ƒëo√°n xu h∆∞·ªõng ng·∫Øn h·∫°n (Linear ho·∫∑c Chronos)
    - Nh·∫≠n l·ªùi khuy√™n t·ª´ AI (hi·ªán t·∫°i l√† gi·∫£ l·∫≠p)
    - Bi·ªÉu ƒë·ªì tr·ª±c quan
    - Xu·∫•t b√°o c√°o CSV/PDF

    **C√°ch d√πng nhanh:**
    1. Ch·ªçn m√£ c·ªï phi·∫øu
    2. Ch·ªçn kho·∫£ng th·ªùi gian
    3. Ch·ªçn m√¥ h√¨nh (linear/auto/chronos)
    4. Nh·∫•n **Ph√¢n t√≠ch**
    """
    )


def _perform_analysis(symbol: str, start_date, end_date, forecast_days: int, model_choice: str):
    """Th·ª±c hi·ªán ph√¢n t√≠ch c·ªï phi·∫øu (d√πng forecast_service)"""

    # Validate input
    try:
        symbol = normalize_symbol(symbol)
        start_date_str = start_date.strftime("%Y-%m-%d")
        end_date_str = end_date.strftime("%Y-%m-%d")
        validate_date_range(start_date_str, end_date_str)
    except ValueError as e:
        st.error(f"L·ªói ƒë·∫ßu v√†o: {str(e)}")
        return

    # Progress UI
    progress_bar = st.progress(0)
    status_text = st.empty()

    try:
        # B∆∞·ªõc 1: ƒê·ªçc d·ªØ li·ªáu
        status_text.text("ƒêang ƒë·ªçc d·ªØ li·ªáu...")
        progress_bar.progress(20)
        df = get_stock_data(symbol, start_date_str, end_date_str)

        if is_data_short(df):
            st.warning("D·ªØ li·ªáu ng·∫Øn, k·∫øt qu·∫£ c√≥ th·ªÉ thi·∫øu ·ªïn ƒë·ªãnh. M·ªôt s·ªë ch·ªâ b√°o c√≥ th·ªÉ ch∆∞a ph·∫£n √°nh ƒë√∫ng xu h∆∞·ªõng.")

        # B∆∞·ªõc 2: T√≠nh ch·ªâ b√°o
        status_text.text("ƒêang t√≠nh ch·ªâ b√°o k·ªπ thu·∫≠t...")
        progress_bar.progress(40)
        df_with_indicators = add_indicators(df)

        # B∆∞·ªõc 3: D·ª± b√°o (service)
        status_text.text(f"ƒêang d·ª± ƒëo√°n ({model_choice})...")
        progress_bar.progress(65)
        result_json = get_forecast(
            symbol=symbol,
            start_date=start_date_str,
            end_date=end_date_str,
            horizon_days=forecast_days,
            model=model_choice,  # "linear" | "auto" | "chronos"
        )

        # B∆∞·ªõc 4: L·ªùi khuy√™n AI
        status_text.text("ƒêang t·∫°o l·ªùi khuy√™n AI...")
        progress_bar.progress(85)
        ai_advice = get_ai_advice(result_json)
        result_json["ai_advice"] = ai_advice

        # B∆∞·ªõc 5: Ghi log
        status_text.text("ƒêang l∆∞u k·∫øt qu·∫£...")
        progress_bar.progress(95)
        log_result = append_daily_log(result_json)

        # Ho√†n t·∫•t
        progress_bar.progress(100)
        status_text.text("Ph√¢n t√≠ch ho√†n th√†nh!")

        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        _display_results(result_json, df_with_indicators, log_result)

    except FileNotFoundError:
        st.error(f"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho m√£ {symbol}. Ki·ªÉm tra file notebooks/data/{symbol}.csv.")
        st.stop()
    except ValueError as e:
        st.error(f"L·ªói d·ªØ li·ªáu: {str(e)}")
    except Exception:
        st.error("L·ªói kh√¥ng x√°c ƒë·ªãnh:")
        st.code(traceback.format_exc())
    finally:
        progress_bar.empty()
        status_text.empty()


def _display_results(result_json: dict, df: pd.DataFrame, log_result: dict):
    """Hi·ªÉn th·ªã k·∫øt qu·∫£ ph√¢n t√≠ch"""

    st.success(f"ƒê√£ ghi v√†o {log_result['file_path']} ‚Äî T·ªïng s·ªë h√¥m nay: {log_result['total_records_today']}")

    tab1, tab2, tab3, tab4, tab5 = st.tabs(["T·ªïng quan", "Bi·ªÉu ƒë·ªì", "K·∫øt qu·∫£ JSON", "L·ªùi khuy√™n AI", "So s√°nh / Correlation"])

    with tab1:
        _show_overview(result_json, df)

    with tab2:
        _show_charts(result_json, df)

    with tab3:
        _show_json_result(result_json)

    with tab4:
        _show_ai_advice(result_json)
        
    with tab5:
        # S·ª¨A L·ªñI: Th·ª•t l·ªÅ h√†m n√†y v√†o trong 'with tab5:'
        _show_compare_tab()


def _show_overview(result_json: dict, df: pd.DataFrame):
    """Hi·ªÉn th·ªã t·ªïng quan k·∫øt qu·∫£"""

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric(
            "üí∞ Gi√° hi·ªán t·∫°i",
            f"${result_json['latest_price']:,.2f}"
        )
    
    with col2:
        trend = result_json["trend"]
        trend_display = "TƒÉng" if trend == "Uptrend" else "Gi·∫£m" if trend == "Downtrend" else "ƒêi ngang"
        st.metric("Xu h∆∞·ªõng", trend_display)

    with col3:
        signal = result_json["signal"]
        signal_display = "MUA" if signal == "BUY" else "B√ÅN" if signal == "SELL" else "GI·ªÆ"
        st.metric("T√≠n hi·ªáu", signal_display)

    with col4:
        from ai_module import get_market_sentiment

        sentiment = get_market_sentiment(result_json["symbol"], result_json)
        st.metric("Sentiment", sentiment)

    # Ch·ªâ b√°o
    st.subheader("Ch·ªâ b√°o k·ªπ thu·∫≠t")
    indicators = result_json["technical_indicators"]
    c1, c2, c3 = st.columns(3)
    with c1:
        if "SMA7" in indicators:
            st.metric("SMA(7)", f"{indicators['SMA7']:,.2f}")
    with c2:
        if "SMA30" in indicators:
            st.metric("SMA(30)", f"{indicators['SMA30']:,.2f}")
    with c3:
        if "RSI14" in indicators:
            rsi = indicators["RSI14"]
            rsi_status = "Qu√° mua" if rsi > 70 else "Qu√° b√°n" if rsi < 30 else "B√¨nh th∆∞·ªùng"
            st.metric("RSI(14)", f"{rsi:.2f}", delta=rsi_status)

    # D·ª± ƒëo√°n + bounds
    st.subheader("D·ª± ƒëo√°n gi√° (k√®m min/max)")
    preds = result_json.get("forecast_next_days", [])
    bounds = result_json.get("forecast_bounds", [])
    if preds:
        rows = []
        for i, p in enumerate(preds, start=1):
            lo = bounds[i - 1]["min"] if i - 1 < len(bounds) else None
            hi = bounds[i - 1]["max"] if i - 1 < len(bounds) else None
            rows.append({"Ng√†y": f"T+{i}", "D·ª± ƒëo√°n": p, "Min": lo, "Max": hi})
        forecast_df = pd.DataFrame(rows)
        st.dataframe(forecast_df, use_container_width=True)

    # L√Ω do t√≠n hi·ªáu
    st.subheader("L√Ω do t√≠n hi·ªáu")
    st.info(result_json.get("reason", ""))

    # Model d√πng
    st.caption(f"Model used: **{result_json.get('model_used', 'linear')}**")


def _show_charts(result_json: dict, df: pd.DataFrame):
    """Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì"""

    st.subheader("Bi·ªÉu ƒë·ªì ph√¢n t√≠ch")

    preds = result_json.get("forecast_next_days", None)

    # Bi·ªÉu ƒë·ªì gi√° + MA + d·ª± b√°o
    st.markdown("### Bi·ªÉu ƒë·ªì gi√° (Close + MA + Forecast)")
    fig1 = make_price_chart(df, result_json["symbol"], forecast_days=preds)
    st.pyplot(fig1)

    # Candlestick
    st.markdown("### Bi·ªÉu ƒë·ªì Candlestick (OHLC + MA + Volume)")
    try:
        fig2 = create_candlestick_chart(df, result_json["symbol"], forecast_days=preds)
        st.pyplot(fig2)
    except ValueError as e:
        st.warning(f"Kh√¥ng th·ªÉ t·∫°o bi·ªÉu ƒë·ªì Candlestick: {str(e)}")
        st.info("Bi·ªÉu ƒë·ªì Candlestick c·∫ßn d·ªØ li·ªáu OHLCV ƒë·∫ßy ƒë·ªß (Open, High, Low, Close, Volume)")

    # Combined
    st.markdown("### Bi·ªÉu ƒë·ªì t·ªïng h·ª£p (Close + MA + RSI + Volume + Forecast)")
    fig3 = create_combined_chart(df, result_json["symbol"], forecast_days=preds)
    st.pyplot(fig3)


def _show_json_result(result_json: dict):
    """Hi·ªÉn th·ªã k·∫øt qu·∫£ JSON"""

    st.subheader("K·∫øt qu·∫£ ph√¢n t√≠ch (JSON)")
    st.json(result_json)

    json_str = json.dumps(result_json, indent=2, ensure_ascii=False)
    st.download_button(
        label="T·∫£i xu·ªëng JSON",
        data=json_str,
        file_name=f"stock_analysis_{result_json['symbol']}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
        mime="application/json",
    )


def _show_ai_advice(result_json: dict):
    """Hi·ªÉn th·ªã l·ªùi khuy√™n AI"""

    st.subheader("G·ª£i √Ω t·ª´ AI")
    st.info(result_json.get("ai_advice", ""))

    col1, col2 = st.columns(2)
    with col1:
        st.metric("ƒê·ªô tin c·∫≠y AI", f"{get_ai_confidence_score(result_json):.1%}")

    with col2:
        from ai_module import get_market_sentiment

        sentiment = get_market_sentiment(result_json["symbol"], result_json)
        st.metric("T√¢m l√Ω th·ªã tr∆∞·ªùng", sentiment)

    st.warning(
        "L∆∞u √Ω: ƒê√¢y ch·ªâ l√† ph√¢n t√≠ch k·ªπ thu·∫≠t v√† d·ª± ƒëo√°n AI. "
        "Kh√¥ng ph·∫£i l·ªùi khuy√™n ƒë·∫ßu t∆∞. H√£y tham kh·∫£o th√™m nhi·ªÅu ngu·ªìn kh√°c."
    )
    
def _show_compare_tab():
    """Hi·ªÉn th·ªã ma tr·∫≠n t∆∞∆°ng quan & so s√°nh gi·ªØa c√°c m√£ t·ª´ aligned.csv trong notebooks/data."""
    st.subheader("So s√°nh / Correlation (aligned)")

    data_dir = Path("notebooks/data")
    candidates = [
        ("AAPL", data_dir / "aapl_aligned.csv"),
        ("MSFT", data_dir / "msft_aligned.csv"),
        ("VNINDEX", data_dir / "vnindex_aligned.csv"),
    ]

    # L·ªçc file t·ªìn t·∫°i
    avail = [(sym, p) for sym, p in candidates if p.exists()]

    if not avail:
        st.info("Ch∆∞a th·∫•y *_aligned.csv trong notebooks/data. H√£y ch·∫°y notebook `final_data_check.ipynb` (Cell 6).")
        return

    # Ch·ªçn m√£ ƒë·ªÉ so s√°nh
    syms = [sym for sym, _ in avail]
    selected = st.multiselect(
        "Ch·ªçn c√°c m√£ ƒë·ªÉ so s√°nh", syms, default=syms,
        help="Ch·ªâ hi·ªÉn th·ªã nh·ªØng m√£ ƒë√£ c√≥ *_aligned.csv"
    )
    if not selected:
        st.warning("Ch·ªçn √≠t nh·∫•t 2 m√£ ƒë·ªÉ xem t∆∞∆°ng quan.")
        return

    # Load & merge theo 'date'
    merged = None
    for sym, path in avail:
        if sym not in selected:
            continue
        try:
            df = pd.read_csv(path, parse_dates=["date"])
            if "close" not in df.columns:
                st.warning(f"{sym}: thi·∫øu c·ªôt 'close' trong {path.name}")
                continue
            df = df[["date", "close"]].rename(columns={"close": sym})
            merged = df if merged is None else merged.merge(df, on="date", how="inner")
        except Exception as e:
            st.warning(f"L·ªói ƒë·ªçc {path.name}: {e}")

    if merged is None or merged.empty or len(merged.columns) < 3:
        st.info("Kh√¥ng ƒë·ªß d·ªØ li·ªáu tr√πng ng√†y ƒë·ªÉ t√≠nh t∆∞∆°ng quan.")
        return

    st.markdown("#### Ma tr·∫≠n t∆∞∆°ng quan (Pearson)")
    corr = merged.drop(columns=["date"]).corr()
    st.dataframe(corr.style.background_gradient(cmap="coolwarm"), use_container_width=True)

    st.markdown("#### Chu·ªói gi√° ƒë√£ cƒÉn ch·ªânh (Close)")
    st.line_chart(merged.set_index("date").dropna())

    st.caption("Ngu·ªìn: `notebooks/data/*_aligned.csv` ‚Äî c√πng kho·∫£ng overlap gi·ªØa c√°c m√£.")

if __name__ == "__main__":
    main()
    st.caption(
        "Project AI Stock Insight: ch·ªçn m√¥ h√¨nh *linear* ƒë·ªÉ ch·∫°y nhanh, ho·∫∑c *auto/chronos* n·∫øu ƒë√£ c√†i transformers."
    )