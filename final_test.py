#!/usr/bin/env python3
"""
Final test script ƒë·ªÉ ki·ªÉm tra to√†n b·ªô d·ª± √°n sau khi chuy·ªÉn ra th∆∞ m·ª•c root
"""

import sys
import os
from pathlib import Path

def test_project_structure():
    """Ki·ªÉm tra c·∫•u tr√∫c d·ª± √°n"""
    print("üîç Ki·ªÉm tra c·∫•u tr√∫c d·ª± √°n...")
    
    required_files = [
        'app.py', 'data_service.py', 'indicators.py', 'predictor.py',
        'ai_module.py', 'logger.py', 'visualizer.py', 'utils.py',
        'demo.py', 'requirements.txt', 'README.md', 'QUICK_START.md'
    ]
    
    required_dirs = ['data', 'reports']
    
    missing_files = []
    for file in required_files:
        if not Path(file).exists():
            missing_files.append(file)
    
    missing_dirs = []
    for dir_name in required_dirs:
        if not Path(dir_name).exists():
            missing_dirs.append(dir_name)
    
    if missing_files:
        print(f"‚ùå Thi·∫øu files: {missing_files}")
        return False
    
    if missing_dirs:
        print(f"‚ùå Thi·∫øu th∆∞ m·ª•c: {missing_dirs}")
        return False
    
    print("‚úÖ C·∫•u tr√∫c d·ª± √°n OK")
    return True

def test_imports():
    """Ki·ªÉm tra imports"""
    print("üîç Ki·ªÉm tra imports...")
    
    try:
        import pandas as pd
        import numpy as np
        import matplotlib.pyplot as plt
        from sklearn.linear_model import LinearRegression
        import streamlit as st
        print("‚úÖ External libraries imported")
        
        import utils
        import data_service
        import indicators
        import predictor
        import ai_module
        import logger
        import visualizer
        print("‚úÖ Project modules imported")
        
        return True
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def test_data_files():
    """Ki·ªÉm tra d·ªØ li·ªáu CSV"""
    print("üîç Ki·ªÉm tra d·ªØ li·ªáu CSV...")
    
    try:
        fpt_file = Path('data/FPT.csv')
        vnm_file = Path('data/VNM.csv')
        
        if not fpt_file.exists():
            print("‚ùå Thi·∫øu data/FPT.csv")
            return False
        
        if not vnm_file.exists():
            print("‚ùå Thi·∫øu data/VNM.csv")
            return False
        
        # Ki·ªÉm tra n·ªôi dung
        import pandas as pd
        df_fpt = pd.read_csv(fpt_file)
        df_vnm = pd.read_csv(vnm_file)
        
        if len(df_fpt) < 50:
            print(f"‚ùå FPT.csv c√≥ qu√° √≠t d·ªØ li·ªáu: {len(df_fpt)} ng√†y")
            return False
        
        if len(df_vnm) < 50:
            print(f"‚ùå VNM.csv c√≥ qu√° √≠t d·ªØ li·ªáu: {len(df_vnm)} ng√†y")
            return False
        
        print(f"‚úÖ FPT.csv: {len(df_fpt)} ng√†y")
        print(f"‚úÖ VNM.csv: {len(df_vnm)} ng√†y")
        return True
        
    except Exception as e:
        print(f"‚ùå Error reading data: {e}")
        return False

def test_basic_functionality():
    """Ki·ªÉm tra ch·ª©c nƒÉng c∆° b·∫£n"""
    print("üîç Ki·ªÉm tra ch·ª©c nƒÉng c∆° b·∫£n...")
    
    try:
        from datetime import datetime, timedelta
        import data_service
        import indicators
        import predictor
        import ai_module
        
        # Test ƒë·ªçc d·ªØ li·ªáu
        end_date = datetime.now()
        start_date = end_date - timedelta(days=30)
        
        df = data_service.get_stock_data('FPT', start_date.strftime('%Y-%m-%d'), end_date.strftime('%Y-%m-%d'))
        if len(df) == 0:
            print("‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c d·ªØ li·ªáu")
            return False
        
        # Test t√≠nh ch·ªâ b√°o
        df_indicators = indicators.add_indicators(df)
        if 'SMA7' not in df_indicators.columns:
            print("‚ùå Kh√¥ng t√≠nh ƒë∆∞·ª£c SMA7")
            return False
        
        # Test d·ª± ƒëo√°n
        prediction = predictor.forecast_price_regression(df_indicators, 5)
        if not prediction or 'trend' not in prediction:
            print("‚ùå Kh√¥ng d·ª± ƒëo√°n ƒë∆∞·ª£c")
            return False
        
        # Test AI advice
        result_json = {
            'symbol': 'FPT',
            'trend': prediction['trend'],
            'signal': prediction['signal'],
            'technical_indicators': {'RSI14': 65, 'SMA7': 100, 'SMA30': 95}
        }
        ai_advice = ai_module.get_ai_advice(result_json)
        if not ai_advice:
            print("‚ùå Kh√¥ng t·∫°o ƒë∆∞·ª£c AI advice")
            return False
        
        print("‚úÖ Ch·ª©c nƒÉng c∆° b·∫£n OK")
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing functionality: {e}")
        return False

def main():
    """H√†m ch√≠nh"""
    print("üöÄ FINAL TEST - AI Stock Insight")
    print("=" * 50)
    
    tests = [
        ("C·∫•u tr√∫c d·ª± √°n", test_project_structure),
        ("Imports", test_imports),
        ("D·ªØ li·ªáu CSV", test_data_files),
        ("Ch·ª©c nƒÉng c∆° b·∫£n", test_basic_functionality)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}:")
        if test_func():
            passed += 1
        else:
            print(f"‚ùå {test_name} FAILED")
    
    print("\n" + "=" * 50)
    print(f"üìä K·∫æT QU·∫¢: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ T·∫§T C·∫¢ TESTS TH√ÄNH C√îNG!")
        print("üöÄ S·∫µn s√†ng ch·∫°y: streamlit run app.py")
        print("üéØ Ho·∫∑c test: python3 demo.py")
    else:
        print("‚ùå C√ì L·ªñI! Vui l√≤ng ki·ªÉm tra l·∫°i.")
        sys.exit(1)

if __name__ == "__main__":
    main()
