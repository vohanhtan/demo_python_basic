"""
data_service.py
----------------
Phi√™n b·∫£n d√πng d·ªØ li·ªáu th·∫≠t t·ª´ Yahoo Finance.
Kh√¥ng c√≤n ƒë·ªçc CSV hay gi·∫£ l·∫≠p ‚Äî to√†n b·ªô d·ªØ li·ªáu ƒë∆∞·ª£c t·∫£i qua yfinance.

Public function gi·ªØ nguy√™n ch·ªØ k√Ω:
    get_stock_data(symbol: str, start_date: str, end_date: str) -> pd.DataFrame
"""

import yfinance as yf
import pandas as pd
from datetime import datetime, timedelta

def get_stock_data(symbol: str, start_date: str, end_date: str) -> pd.DataFrame:
    """
    L·∫•y d·ªØ li·ªáu ch·ª©ng kho√°n th·∫≠t t·ª´ Yahoo Finance trong kho·∫£ng th·ªùi gian ch·ªâ ƒë·ªãnh.
    
    Args:
        symbol (str): M√£ c·ªï phi·∫øu (v√≠ d·ª•: 'AAPL', 'MSFT', 'TSLA', 'NVDA', 'GOOG', 'META', 'AMZN', 'NFLX', 'AMD', 'JPM')
        start_date (str): Ng√†y b·∫Øt ƒë·∫ßu, ƒë·ªãnh d·∫°ng 'YYYY-MM-DD'
        end_date (str): Ng√†y k·∫øt th√∫c, ƒë·ªãnh d·∫°ng 'YYYY-MM-DD'
    
    Returns:
        pd.DataFrame: DataFrame v·ªõi c√°c c·ªôt:
            Date, Symbol, Open, High, Low, Close, Volume
    """

    # ƒê·∫£m b·∫£o symbol h·ª£p l·ªá
    symbol = symbol.strip().upper()

    # Yahoo y√™u c·∫ßu end_date l√† exclusive => c·ªông th√™m 1 ng√†y
    end_plus = (datetime.fromisoformat(end_date) + timedelta(days=1)).strftime("%Y-%m-%d")

    # T·∫£i d·ªØ li·ªáu t·ª´ Yahoo
    try:
        df = yf.download(symbol, start=start_date, end=end_plus, progress=False, threads=False)
    except Exception as e:
        raise RuntimeError(f"L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ Yahoo Finance: {e}")

    # Ki·ªÉm tra k·∫øt qu·∫£
    if df is None or df.empty:
        raise ValueError(f"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho m√£ '{symbol}' trong kho·∫£ng {start_date} ƒë·∫øn {end_date}.")

    # Reset index ƒë·ªÉ c√≥ c·ªôt Date
    df.reset_index(inplace=True)
    
    # X·ª≠ l√Ω MultiIndex columns t·ª´ yfinance
    if isinstance(df.columns, pd.MultiIndex):
        # Flatten MultiIndex columns: (column_name, ticker) -> column_name
        df.columns = df.columns.get_level_values(0)

    # Chu·∫©n h√≥a schema
    df.rename(columns={
        "Date": "Date",
        "Open": "Open",
        "High": "High",
        "Low": "Low",
        "Close": "Close",
        "Adj Close": "Close",  # ph√≤ng tr∆∞·ªùng h·ª£p Yahoo tr·∫£ Adj Close
        "Volume": "Volume"
    }, inplace=True)

    # Gi·ªØ ƒë√∫ng th·ª© t·ª± c·ªôt v√† th√™m Symbol
    df["Symbol"] = symbol
    df = df[["Date", "Symbol", "Open", "High", "Low", "Close", "Volume"]]

    # √âp ki·ªÉu d·ªØ li·ªáu
    df["Date"] = pd.to_datetime(df["Date"]).dt.date
    numeric_cols = ["Open", "High", "Low", "Close", "Volume"]
    for col in numeric_cols:
        df[col] = pd.to_numeric(df[col], errors="coerce")

    # Lo·∫°i b·ªè d√≤ng tr·ªëng ho·∫∑c l·ªói
    df = df.dropna(subset=["Open", "High", "Low", "Close"])
    df = df.sort_values("Date").reset_index(drop=True)

    return df


def get_available_symbols() -> list:
    """
    Tr·∫£ v·ªÅ danh s√°ch c√°c m√£ c·ªï phi·∫øu ph·ªï bi·∫øn c√≥ th·ªÉ ph√¢n t√≠ch.
    """
    return [
        "AAPL", "MSFT", "TSLA", "NVDA", "GOOG", "META", "AMZN", "NFLX", "AMD", "JPM",
        "BAC", "WMT", "PG", "JNJ", "V", "UNH", "HD", "MA", "DIS", "PYPL",
        "ADBE", "CRM", "INTC", "CSCO", "ORCL", "IBM", "QCOM", "TXN", "AVGO", "AMAT"
    ]


def get_data_info(symbol: str, start_date: str = None, end_date: str = None) -> dict:
    """
    L·∫•y th√¥ng tin t·ªïng quan v·ªÅ m√£ c·ªï phi·∫øu t·ª´ Yahoo Finance.
    
    Args:
        symbol (str): M√£ c·ªï phi·∫øu
        start_date (str): Ng√†y b·∫Øt ƒë·∫ßu (optional, m·∫∑c ƒë·ªãnh l·∫•y 1 nƒÉm g·∫ßn nh·∫•t)
        end_date (str): Ng√†y k·∫øt th√∫c (optional, m·∫∑c ƒë·ªãnh l√† h√¥m nay)
        
    Returns:
        dict: Th√¥ng tin c∆° b·∫£n v·ªÅ m√£ c·ªï phi·∫øu
    """
    symbol = symbol.strip().upper()
    
    try:
        # L·∫•y th√¥ng tin c∆° b·∫£n t·ª´ Yahoo
        ticker = yf.Ticker(symbol)
        info = ticker.info
        
        # N·∫øu kh√¥ng c√≥ start_date/end_date, l·∫•y 1 nƒÉm g·∫ßn nh·∫•t
        if not start_date or not end_date:
            from datetime import datetime, timedelta
            end_date = datetime.now().strftime('%Y-%m-%d')
            start_date = (datetime.now() - timedelta(days=365)).strftime('%Y-%m-%d')
        
        # L·∫•y d·ªØ li·ªáu gi√° ƒë·ªÉ t√≠nh to√°n th·ªëng k√™
        df = get_stock_data(symbol, start_date, end_date)
        
        return {
            'symbol': symbol,
            'name': info.get('longName', symbol),
            'sector': info.get('sector', 'Unknown'),
            'industry': info.get('industry', 'Unknown'),
            'market_cap': info.get('marketCap', 0),
            'currency': info.get('currency', 'USD'),
            'exchange': info.get('exchange', 'Unknown'),
            # Th√™m th√¥ng tin th·ªëng k√™ t·ª´ d·ªØ li·ªáu gi√°
            'total_days': len(df),
            'start_date': df['Date'].min().strftime('%Y-%m-%d') if len(df) > 0 else 'N/A',
            'end_date': df['Date'].max().strftime('%Y-%m-%d') if len(df) > 0 else 'N/A',
            'highest_price': df['High'].max() if len(df) > 0 else 0,
            'lowest_price': df['Low'].min() if len(df) > 0 else 0,
            'avg_volume': df['Volume'].mean() if len(df) > 0 else 0
        }
    except Exception as e:
        return {
            'symbol': symbol,
            'name': symbol,
            'sector': 'Unknown',
            'industry': 'Unknown',
            'market_cap': 0,
            'currency': 'USD',
            'exchange': 'Unknown',
            'total_days': 0,
            'start_date': 'N/A',
            'end_date': 'N/A',
            'highest_price': 0,
            'lowest_price': 0,
            'avg_volume': 0
        }


# Test function
if __name__ == "__main__":
    print("üß™ Testing data_service.py with real Yahoo Finance data...")
    
    try:
        # Test v·ªõi AAPL
        df = get_stock_data("AAPL", "2024-07-01", "2024-10-01")
        print(f"‚úÖ AAPL data loaded: {df.shape}")
        print(f"   Columns: {list(df.columns)}")
        print(f"   Date range: {df['Date'].min()} to {df['Date'].max()}")
        print(f"   Sample data:")
        print(df.head())
        
        # Test v·ªõi m√£ kh√°c
        df2 = get_stock_data("MSFT", "2024-08-01", "2024-09-01")
        print(f"\n‚úÖ MSFT data loaded: {df2.shape}")
        
        # Test get_available_symbols
        symbols = get_available_symbols()
        print(f"\n‚úÖ Available symbols: {len(symbols)} symbols")
        
        # Test get_data_info
        info = get_data_info("AAPL")
        print(f"\n‚úÖ AAPL info: {info['name']} ({info['sector']})")
        
        print("\nüéâ All tests passed!")
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        import traceback
        traceback.print_exc()